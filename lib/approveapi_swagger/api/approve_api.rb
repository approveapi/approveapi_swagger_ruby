=begin
#ApproveAPISwagger

#The simple API to request a user's approval on anything via email + sms.

OpenAPI spec version: 1.0.1
Contact: dev@approveapi.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-SNAPSHOT

=end

require 'uri'

module ApproveAPISwagger
  class ApproveApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Sending a prompt
    # Creates a prompt and pushes it to the user (sends via email, sms, or other supported protocols).
    # @param create_prompt_request 
    # @param [Hash] opts the optional parameters
    # @return [Prompt]
    def create_prompt(create_prompt_request, opts = {})
      data, _status_code, _headers = create_prompt_with_http_info(create_prompt_request, opts)
      data
    end

    # Sending a prompt
    # Creates a prompt and pushes it to the user (sends via email, sms, or other supported protocols).
    # @param create_prompt_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Prompt, Fixnum, Hash)>] Prompt data, response status code and response headers
    def create_prompt_with_http_info(create_prompt_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApproveApi.create_prompt ...'
      end
      # verify the required parameter 'create_prompt_request' is set
      if @api_client.config.client_side_validation && create_prompt_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_prompt_request' when calling ApproveApi.create_prompt"
      end
      # resource path
      local_var_path = '/prompt'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_prompt_request)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prompt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApproveApi#create_prompt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a prompt
    # Retrieve the prompt object with the given ID.
    # @param id The identifier for a pending or completed prompt. This is returned when you create a prompt.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :long_poll If true, the request waits (long-polls) until the user responds to the prompt or more than 10 minutes pass. Defaults to false.
    # @return [Prompt]
    def get_prompt(id, opts = {})
      data, _status_code, _headers = get_prompt_with_http_info(id, opts)
      data
    end

    # Retrieve a prompt
    # Retrieve the prompt object with the given ID.
    # @param id The identifier for a pending or completed prompt. This is returned when you create a prompt.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :long_poll If true, the request waits (long-polls) until the user responds to the prompt or more than 10 minutes pass. Defaults to false.
    # @return [Array<(Prompt, Fixnum, Hash)>] Prompt data, response status code and response headers
    def get_prompt_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApproveApi.get_prompt ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApproveApi.get_prompt"
      end
      # resource path
      local_var_path = '/prompt/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'long_poll'] = opts[:'long_poll'] if !opts[:'long_poll'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prompt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApproveApi#get_prompt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check prompt status
    # Returns whether a prompt has been completed by the user. This request does not require authentication, and so can be used client-side without sharing API credentials.
    # @param id The prompt identifier.
    # @param [Hash] opts the optional parameters
    # @return [PromptStatus]
    def get_prompt_status(id, opts = {})
      data, _status_code, _headers = get_prompt_status_with_http_info(id, opts)
      data
    end

    # Check prompt status
    # Returns whether a prompt has been completed by the user. This request does not require authentication, and so can be used client-side without sharing API credentials.
    # @param id The prompt identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PromptStatus, Fixnum, Hash)>] PromptStatus data, response status code and response headers
    def get_prompt_status_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApproveApi.get_prompt_status ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApproveApi.get_prompt_status"
      end
      # resource path
      local_var_path = '/prompt/{id}/status'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PromptStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApproveApi#get_prompt_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
